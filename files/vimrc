" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker:
" Vim Configuration {
    set nocompatible
    " Source the bundles for plugins {
        if filereadable(expand("~/.vimrc.bundles"))
            source ~/.vimrc.bundles
        endif
    " }

    " Core Configuration {
        autocmd FileType * autocmd BufWritePre <buffer> call StripTrailingWhitespace()
        " Allow for truecolor support
        set termguicolors

        " Turn syntax highlighting on
        syntax on
        filetype plugin indent on
        set mouse=a
        set mousehide
        scriptencoding utf-8

        " Do the cool vim things and assume a dark background
        set background=dark
        colorscheme monokai_pro

        " Lifesaver shortcut!
        inoremap jk <ESC>

        " Formatting
        set autoindent
        set shiftwidth=4
        set expandtab
        set tabstop=4
        set softtabstop=4
        set nojoinspaces
        set splitright
        set splitbelow
        set backspace=indent,eol,start
        set ruler
        set linespace=0
        set number
        set showmatch
        set incsearch
        set winminheight=0              " Windows can be 0 line high
        set ignorecase                  " Case insensitive search
        set smartcase                   " Case sensitive when uc present
        set wildmenu                    " Show list instead of just completing
        set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
        set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
        set scrolljump=5                " Lines to scroll when cursor leaves screen
        set scrolloff=3                 " Minimum lines to keep above and below cursor
        set foldenable                  " Auto fold code
        set list
        set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
        autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2
        noremap j gj
        noremap k gk

        " Italics are cool
        hi htmlArg gui=italic
        hi Comment gui=italic
        hi Type    gui=italic
        hi htmlArg cterm=italic
        hi Comment cterm=italic
        hi Type    cterm=italic

        " Shifting in visual mode without exiting
        vnoremap < <gv
        vnoremap > >gv

        " Code folding options
        nmap <leader>f0 :set foldlevel=0<CR>
        nmap <leader>f1 :set foldlevel=1<CR>
        nmap <leader>f2 :set foldlevel=2<CR>
        nmap <leader>f3 :set foldlevel=3<CR>
        nmap <leader>f4 :set foldlevel=4<CR>
        nmap <leader>f5 :set foldlevel=5<CR>
        nmap <leader>f6 :set foldlevel=6<CR>
        nmap <leader>f7 :set foldlevel=7<CR>
        nmap <leader>f8 :set foldlevel=8<CR>
        nmap <leader>f9 :set foldlevel=9<CR>

        nmap <silent> <leader>/ :set invhlsearch<CR>

        " Merge the paste buffer with the system clipboard
        set clipboard=unnamed

        " Set persistent undo/backup
        set backup
        set undofile
        set undolevels=1000
        set undoreload=10000

        " Set autowrite
        set shortmess+=filmnrxoOtT
        set viewoptions=folds,options,cursor,unix,slash

        " Reset cursor position in git commit messages
        au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

        let mapleader = ','
    " }

    " Plugins {
        " Airline settings {
            set laststatus=2
            let g:airline_powerline_fonts = 1
            let g:airline_theme = "base16_monokai"
            let g:airline#extensions#tabline#enabled = 1
        " }

        " Ctrl-P {
            if executable('rg')
                set grepprg=rg\ --color=never
                let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
                let g:ctrlp_use_caching = 0
            endif
        " }

        " NerdTree {
            let g:NERDShutUp = 1
        " }

        " YouCompleteMe {
            let g:ycm_global_ycm_extra_conf = "$HOME/.ycm_extra_conf.py"
        " }

        " NerdTree {
            if isdirectory(expand("~/.config/nvim/plugged/nerdtree"))
                map <C-e> <plug>NERDTreeTabsToggle<CR>
                map <leader>e :NERDTreeFind<CR>
                nmap <leader>nt :NERDTreeFind<CR>

                let NERDTreeShowBookmarks=1
                let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
                let NERDTreeChDirMode=0
                let NERDTreeQuitOnOpen=1
                let NERDTreeMouseMode=2
                let NERDTreeShowHidden=1
                let NERDTreeKeepTreeInNewTab=1
                let g:nerdtree_tabs_open_on_gui_startup=0
            endif
        " }

        " coc.nvim {
            " if hidden is not set, TextEdit might fail.
            set hidden

            " Some servers have issues with backup files, see #649.
            set nobackup
            set nowritebackup

            " You will have a bad experience for diagnostic messages when it's
            " default is 4000.
            set updatetime=300

            " don't give |ins-completion-menu| messages.
            set shortmess+=c

            " Use tab for trigger completion with characters ahead and navigate.
            " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
            inoremap <silent><expr> <TAB>
                  \ pumvisible() ? "\<C-n>" :
                  \ <SID>check_back_space() ? "\<TAB>" :
                  \ coc#refresh()
            inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

            function! s:check_back_space() abort
              let col = col('.') - 1
              return !col || getline('.')[col - 1]  =~# '\s'
            endfunction

            " Use <c-space> to trigger completion.
            inoremap <silent><expr> <c-space> coc#refresh()

            " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
            " Coc only does snippet and additional edit on confirm.
            inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
            " Or use `complete_info` if your vim support it, like:
            inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

            " Use `[g` and `]g` to navigate diagnostics
            nmap <silent> [g <Plug>(coc-diagnostic-prev)
            nmap <silent> ]g <Plug>(coc-diagnostic-next)

            " Remap keys for gotos
            nmap <silent> gd <Plug>(coc-definition)
            nmap <silent> gy <Plug>(coc-type-definition)
            nmap <silent> gi <Plug>(coc-implementation)
            nmap <silent> gr <Plug>(coc-references)

            " Use K to show documentation in preview window
            nnoremap <silent> K :call <SID>show_documentation()<CR>

            function! s:show_documentation()
              if (index(['vim','help'], &filetype) >= 0)
                execute 'h '.expand('<cword>')
              else
                call CocAction('doHover')
              endif
            endfunction

            " Highlight symbol under cursor on CursorHold
            autocmd CursorHold * silent call CocActionAsync('highlight')

            " Remap for rename current word
            nmap <leader>rn <Plug>(coc-rename)

            " Remap for format selected region
            xmap <leader>f  <Plug>(coc-format-selected)
            nmap <leader>f  <Plug>(coc-format-selected)

            augroup mygroup
              autocmd!
              " Setup formatexpr specified filetype(s).
              autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
              " Update signature help on jump placeholder
              autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
            augroup end

            " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
            xmap <leader>a  <Plug>(coc-codeaction-selected)
            nmap <leader>a  <Plug>(coc-codeaction-selected)

            " Remap for do codeAction of current line
            nmap <leader>ac  <Plug>(coc-codeaction)
            " Fix autofix problem of current line
            nmap <leader>qf  <Plug>(coc-fix-current)

            " Create mappings for function text object, requires document symbols feature of languageserver.
            xmap if <Plug>(coc-funcobj-i)
            xmap af <Plug>(coc-funcobj-a)
            omap if <Plug>(coc-funcobj-i)
            omap af <Plug>(coc-funcobj-a)

            " Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
            nmap <silent> <C-d> <Plug>(coc-range-select)
            xmap <silent> <C-d> <Plug>(coc-range-select)

            " Use `:Format` to format current buffer
            command! -nargs=0 Format :call CocAction('format')

            " Use `:Fold` to fold current buffer
            command! -nargs=? Fold :call     CocAction('fold', <f-args>)

            " use `:OR` for organize import of current buffer
            command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

            " Add status line support, for integration with other plugin, checkout `:h coc-status`
            set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

            " Using CocList
            " Show all diagnostics
            nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
            " Manage extensions
            nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
            " Show commands
            nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
            " Find symbol of current document
            nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
            " Search workspace symbols
            nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
            " Do default action for next item.
            nnoremap <silent> <space>j  :<C-u>CocNext<CR>
            " Do default action for previous item.
            nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
            " Resume latest coc list
            nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
        " }
    " }

    " Functions {
       " Initialize directories {
           function! InitializeDirectories()
               let parent = $HOME
               let prefix = 'vim'
               let dir_list = {
                           \ 'backup': 'backupdir',
                           \ 'views': 'viewdir',
                           \ 'swap': 'directory' }

               if has('persistent_undo')
                   let dir_list['undo'] = 'undodir'
               endif

               " To specify a different directory in which to place the vimbackup,
               " vimviews, vimundo, and vimswap files/directories, add the following to
               " your .vimrc.before.local file:
               "   let g:spf13_consolidated_directory = <full path to desired directory>
               "   eg: let g:spf13_consolidated_directory = $HOME . '/.vim/'
               if exists('g:spf13_consolidated_directory')
                   let common_dir = g:spf13_consolidated_directory . prefix
               else
                   let common_dir = parent . '/.' . prefix
               endif

               for [dirname, settingname] in items(dir_list)
                   let directory = common_dir . dirname . '/'
                   if exists("*mkdir")
                       if !isdirectory(directory)
                           call mkdir(directory)
                       endif
                   endif
                   if !isdirectory(directory)
                       echo "Warning: Unable to create backup directory: " . directory
                       echo "Try: mkdir -p " . directory
                   else
                       let directory = substitute(directory, " ", "\\\\ ", "g")
                       exec "set " . settingname . "=" . directory
                   endif
               endfor
           endfunction
           call InitializeDirectories()
       " }

       " Initialize NERDTree as needed {
           function! NERDTreeInitAsNeeded()
               redir => bufoutput
               buffers!
               redir END
               let idx = stridx(bufoutput, "NERD_tree")
               if idx > -1
                   NERDTreeMirror
                   NERDTreeFind
                   wincmd l
               endif
           endfunction
       " }

       " Strip whitespace {
           function! StripTrailingWhitespace()
               " Preparation: save last search, and cursor position.
               let _s=@/
               let l = line(".")
               let c = col(".")
               " do the business:
               %s/\s\+$//e
               " clean up: restore previous search history, and cursor position
               let @/=_s
               call cursor(l, c)
           endfunction
       " }
     " }
" }

